// <auto-generated> This file has been auto generated by Intercode Toolbox Typed Primitives. </auto-generated>
#nullable enable

namespace $Namespace$;

$TypeConverterAttribute$$SystemTextJsonConverterAttribute$$NewtonsoftJsonConverterAttribute$[global::System.Diagnostics.DebuggerDisplay( "$TypeName$ = {_value}" )]
public readonly partial struct $TypeName$
  : global::Intercode.Toolbox.TypedPrimitives.IReferenceTypePrimitive<$TypeName$, $TypeKeyword$>,
    global::System.IComparable<$TypeName$>,
    global::System.IComparable,
#if NET7_0_OR_GREATER
    global::System.ISpanFormattable
#else
    global::System.IFormattable
#endif
{
  private readonly $TypeKeyword$? _value;

  private $TypeName$( $TypeKeyword$? value )
  {
    _value = value;
    NormalizePartial( ref _value );
  }

  public $TypeKeyword$ Value
  {
    get
    {
      if( _value is null )
      {
        throw new global::System.InvalidOperationException( "Value is null" );
      }

      return _value;
    }
  }

  public $TypeKeyword$? ValueOrDefault => _value;
  public bool IsDefault => _value is null;

  public static global::System.Type GetPrimitiveType()
  {
    return typeof( $TypeKeyword$ );
  }

  public static global::FluentResults.Result<$TypeName$> Create( $TypeKeyword$? value )
  {
    var result = Validate( value );
    if( result.IsFailed )
    {
      return global::FluentResults.Result.Fail<$TypeName$>( result.Errors );
    }

    return new $TypeName$( value );
  }

  public static $TypeName$ CreateOrThrow( $TypeKeyword$? value )
  {
    var result = Create( value );
    if( result.IsSuccess )
    {
      return result.Value;
    }

    throw new global::System.ArgumentException(
      global::System.Linq.Enumerable.First( result.Errors )
            .Message
    );
  }

  public static global::FluentResults.Result Validate( $TypeKeyword$? value )
  {
    global::FluentResults.Result result = global::FluentResults.Result.Ok();
    ValidatePartial( value, ref result );
    return result;
  }

  public static void ValidateOrThrow( $TypeKeyword$? value )
  {
    var result = Validate( value );
    if( result.IsSuccess )
    {
      return;
    }

    throw new global::System.ArgumentException(
      global::System.Linq.Enumerable.First( result.Errors )
            .Message
    );
  }

  public static bool IsValid( $TypeKeyword$? value )
  {
    return Validate( value ).IsSuccess;
  }

  public bool Equals(
    $TypeName$ other )
  {
    return CompareTo( other ) == 0;
  }

  public override int GetHashCode()
  {
    return _value is null ? 0 : _value.GetHashCode();
  }

  public override string ToString()
  {
    return _value is null ? string.Empty : _value.ToString()!;
  }

  public string ToString(
    string? format )
  {
    return _value is null ? string.Empty : ((IFormattable) _value).ToString( format, null );
  }

  public string ToString(
    string? format,
    global::System.IFormatProvider? formatProvider )
  {
    return _value is null ? string.Empty : ((IFormattable) _value).ToString( format, formatProvider );
  }

#if NET7_0_OR_GREATER
  bool ISpanFormattable.TryFormat(
    global::System.Span<char> destination,
    out int charsWritten,
    global::System.ReadOnlySpan<char> format,
    global::System.IFormatProvider? provider )
  {
    return TryFormat( destination, out charsWritten );
  }

  public bool TryFormat(
    global::System.Span<char> destination,
    out int charsWritten )
  {
    if ( _value is null )
    {
      charsWritten = 0;
      return true;
    }

    return _value.TryFormat( destination, out charsWritten );
  }
#endif

  public int CompareTo(
    object? obj )
  {
    if( obj is $TypeName$ primitive )
    {
      return CompareTo( primitive );
    }

    return 1;
  }

  public int CompareTo(
    $TypeName$ other )
  {
    if( _value is null )
    {
      return other._value is null ? 0 : -1;
    }

    if( other._value is null )
    {
      return 1;
    }

    return Uri.Compare( _value, other._value, UriComponents.AbsoluteUri, UriFormat.SafeUnescaped, StringComparison.OrdinalIgnoreCase );
  }

  public static explicit operator $TypeKeyword$(
    $TypeName$ primitive )
  {
    return primitive.Value;
  }

  public static explicit operator $TypeName$( $TypeKeyword$? value )
  {
    var result = $TypeName$.Create( value );
    if( result.IsFailed )
    {
      throw new global::System.InvalidOperationException(
        global::System.Linq.Enumerable.First( result.Errors )
              .Message
      );
    }

    return result.Value;
  }

  static partial void NormalizePartial(
    ref $TypeKeyword$? value );

  static partial void ValidatePartial(
    $TypeKeyword$? value, ref global::FluentResults.Result result );
}
