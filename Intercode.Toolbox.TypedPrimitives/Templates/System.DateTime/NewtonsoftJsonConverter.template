// <auto-generated> This file has been auto generated by Intercode Toolbox Typed Primitives. </auto-generated>
#nullable enable

namespace $TypedPrimitiveNamespace$;

public partial class $TypedPrimitiveName$NewtonsoftJsonConverter: global::Newtonsoft.Json.JsonConverter
{
  public override bool CanConvert(
    global::System.Type objectType )
  {
    return objectType == typeof( $TypedPrimitiveQualifiedName$ );
  }

  public override object? ReadJson(
    global::Newtonsoft.Json.JsonReader reader,
    global::System.Type objectType,
    object? existingValue,
    global::Newtonsoft.Json.JsonSerializer serializer )
  {
    $PrimitiveName$? value = null;
    if( reader.TokenType != global::Newtonsoft.Json.JsonToken.Null )
    {
      if( reader.TokenType == global::Newtonsoft.Json.JsonToken.$NewtonsoftJsonTokenType$ )
      {
        value = $NewtonsoftJsonReader$;
      }
      else if ( reader.TokenType == global::Newtonsoft.Json.JsonToken.Date )
      {
        if ( reader.Value is global::System.DateTime dateTime )
        {
          value = dateTime;
        }
        else if ( reader.Value is global::System.DateTimeOffset dateTimeOffset )
        {
          value = dateTimeOffset.DateTime;
        }
        else
        {
          throw new global::Newtonsoft.Json.JsonSerializationException( "Value must be a DateTime" );
        }
      }
      else
      {
        var converted = false;
        ConvertToPartial( ref reader, objectType, ref value, ref converted );

        if( !converted )
        {
          throw new global::Newtonsoft.Json.JsonSerializationException( "Value must be a $NewtonsoftJsonTokenType$" );
        }
      }
    }

    var result = $TypedPrimitiveQualifiedName$.Create( value );
    if( result.IsFailed )
    {
      throw new global::Newtonsoft.Json.JsonSerializationException( global::System.Linq.Enumerable.First( result.Errors ).Message );
    }

    return result.Value;
  }

  public override void WriteJson(
    global::Newtonsoft.Json.JsonWriter writer,
    object? value,
    global::Newtonsoft.Json.JsonSerializer serializer )
  {
    if( value is null )
    {
      writer.WriteNull();
      return;
    }

    if( value is not $TypedPrimitiveQualifiedName$ s )
    {
      throw new global::Newtonsoft.Json.JsonSerializationException( $$"Unexpected object type: {value.GetType().Name}" );
    }

    if( s.IsDefault )
    {
      writer.WriteNull();
      return;
    }

    $NewtonsoftJsonWriter$;
  }

  partial void ConvertToPartial(
    ref global::Newtonsoft.Json.JsonReader reader,
    global::System.Type typeToConvert,
    ref $PrimitiveName$? convertedValue,
    ref bool converted );
}
