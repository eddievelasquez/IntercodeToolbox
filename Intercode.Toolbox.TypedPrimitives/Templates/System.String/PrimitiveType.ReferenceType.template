// <auto-generated> This file has been auto generated by Intercode Toolbox Typed Primitives. </auto-generated>
#nullable enable

namespace $TypedPrimitiveNamespace$;

$TypeConverterAttribute$$SystemTextJsonConverterAttribute$$NewtonsoftJsonConverterAttribute$[global::System.Diagnostics.DebuggerDisplay( "$TypedPrimitiveName$ = {_value}" )]
public readonly partial struct $TypedPrimitiveName$
  : global::Intercode.Toolbox.TypedPrimitives.IReferenceTypedPrimitive<$PrimitiveName$, $TypedPrimitiveName$>,
    global::System.IComparable<$TypedPrimitiveName$>,
    global::System.IComparable<$PrimitiveName$>,
    global::System.IComparable
{
  public static readonly $TypedPrimitiveName$ Empty = new $TypedPrimitiveName$( null );

  private readonly $PrimitiveName$? _value;

  private $TypedPrimitiveName$( $PrimitiveName$? value )
  {
    _value = value;
    NormalizePartial( ref _value );
  }

  public $PrimitiveName$ Value
  {
    get
    {
      if( !HasValue )
      {
        throw new global::System.InvalidOperationException( "Instance does not have a value" );
      }

      return _value!;
    }
  }

  public bool HasValue => _value is not null;

  public object? GetValueObject()
  {
    return GetValueOrDefault();
  }

  public $PrimitiveName$? GetValueOrDefault()
  {
    return _value;
  }

  public $PrimitiveName$ GetValueOrDefault( $PrimitiveName$ defaultValue )
  {
    return HasValue ? _value! : defaultValue!;
  }

  public $PrimitiveName$? ValueOrDefault => GetValueOrDefault();
  public bool IsDefault => !HasValue;

  public static global::System.Type GetUnderlyingType()
  {
    return typeof( $PrimitiveName$ );
  }

  public static global::FluentResults.Result<$TypedPrimitiveName$> Create( $PrimitiveName$? value )
  {
    var result = Validate( value );
    if( result.IsFailed )
    {
      return global::FluentResults.Result.Fail<$TypedPrimitiveName$>( result.Errors );
    }

    return new $TypedPrimitiveName$( value );
  }

  public static $TypedPrimitiveName$ CreateOrThrow( $PrimitiveName$? value )
  {
    var result = Create( value );
    if( result.IsSuccess )
    {
      return result.Value;
    }

    throw new global::System.ArgumentException(
      global::System.Linq.Enumerable.First( result.Errors )
            .Message
    );
  }

  public static global::FluentResults.Result Validate( $PrimitiveName$? value )
  {
    global::FluentResults.Result result = global::FluentResults.Result.Ok();
    ValidatePartial( value, ref result );
    return result;
  }

  public static void ValidateOrThrow( $PrimitiveName$? value )
  {
    var result = Validate( value );
    if( result.IsSuccess )
    {
      return;
    }

    throw new global::System.ArgumentException(
      global::System.Linq.Enumerable.First( result.Errors )
            .Message
    );
  }

  public static bool IsValid( $PrimitiveName$? value )
  {
    return Validate( value ).IsSuccess;
  }

  public bool Equals(
    $TypedPrimitiveName$ other )
  {
    return CompareTo( other ) == 0;
  }

  public override int GetHashCode()
  {
    return _value is null ? 0 : _value.GetHashCode();
  }

  public override string ToString()
  {
    return _value is null ? string.Empty : _value;
  }

  public string ToString(
    global::System.IFormatProvider? formatProvider )
  {
    return _value is null ? string.Empty : _value.ToString( formatProvider );
  }

  public int CompareTo(
    object? obj )
  {
    return obj switch
    {
      null => 1,
      $TypedPrimitiveName$ primitive => CompareTo( primitive ),
      $PrimitiveName$ value => CompareTo( _value ),
      _ => throw new global::System.ArgumentException( "Object is not a $TypedPrimitiveName$ or $PrimitiveName$" )
    };
  }

  public int CompareTo(
    $TypedPrimitiveName$ other )
  {
    return CompareTo( other.GetValueOrDefault() );
  }

  public int CompareTo(
    $PrimitiveName$? other )
  {
    if( _value is null )
    {
      return other is null ? 0 : -1;
    }

    if( other is null )
    {
      return 1;
    }

    return $PrimitiveName$.Compare( _value, other, $StringComparison$ );
  }

  public static implicit operator $PrimitiveName$(
    $TypedPrimitiveName$ primitive )
  {
    return primitive.Value;
  }

  public static explicit operator $TypedPrimitiveName$( string? value )
  {
    var result = $TypedPrimitiveName$.Create( value );
    if( result.IsFailed )
    {
      throw new global::System.InvalidOperationException(
        global::System.Linq.Enumerable.First( result.Errors )
              .Message
      );
    }

    return result.Value;
  }

  static partial void NormalizePartial(
    ref $PrimitiveName$? value );

  static partial void ValidatePartial(
    $PrimitiveName$? value, ref global::FluentResults.Result result );
}
