// Module Name: TemplateEngineHelper.cs
// Author:      Eduardo Velasquez
// Copyright (c) 2024, Intercode Consulting, Inc.

namespace Intercode.Toolbox.TemplateEngine.Benchmarks;

internal class TemplateEngineHelper
{
  #region Constants

  public const string TemplateText = """
    // <auto-generated> This file has been auto generated by Intercode Toolbox Typed Primitives. </auto-generated>
    #nullable enable

    namespace $Namespace$;

    public partial class $TypeName$SystemTextJsonConverter: global::System.Text.Json.Serialization.JsonConverter<$TypeQualifiedName$>
    {
      public override bool CanConvert(
        global::System.Type typeToConvert )
      {
        return typeToConvert == typeof( $TypeQualifiedName$ );
      }

      public override $TypeQualifiedName$ Read(
        ref global::System.Text.Json.Utf8JsonReader reader,
        global::System.Type typeToConvert,
        global::System.Text.Json.JsonSerializerOptions options )
      {
        $TypeKeyword$? value = null;
        if( reader.TokenType != global::System.Text.Json.JsonTokenType.Null )
        {
          if( reader.TokenType == global::System.Text.Json.JsonTokenType.$JsonTokenType$ )
          {
            value = $JsonReader$;
          }
          else
          {
            bool converted = false;
            ConvertToPartial( ref reader, typeToConvert, options, ref value, ref converted );

            if ( !converted )
            {
              throw new global::System.Text.Json.JsonException( "Value must be a $JsonTokenType$" );
            }
          }
        }

        var result = $TypeQualifiedName$.Create( value );
        if( result.IsFailed )
        {
          throw new global::System.Text.Json.JsonException(
            global::System.Linq.Enumerable.First( result.Errors )
                  .Message
          );
        }

        return result.Value;
      }

      public override void Write(
        global::System.Text.Json.Utf8JsonWriter writer,
        $TypeQualifiedName$ value,
        global::System.Text.Json.JsonSerializerOptions options )
      {
        if ( value.IsDefault )
        {
          writer.WriteNullValue();
          return;
        }

        $JsonWriter$;
      }

      partial void ConvertToPartial(
        ref global::System.Text.Json.Utf8JsonReader reader,
        global::System.Type typeToConvert,
        global::System.Text.Json.JsonSerializerOptions options,
        ref $TypeKeyword$? value,
        ref bool converted );
    }
    """;

  #endregion

  #region Public Methods

  public Template Compile(
    string? templateText = null )
  {
    var compiler = new TemplateCompiler();
    return compiler.Compile( templateText ?? TemplateText );
  }

  public MacroProcessor CreateMacroProcessor()
  {
    return new MacroProcessorBuilder()
           .AddMacro( "Namespace", "Benchmark.Tests" )
           .AddMacro( "TypeName", "TestType" )
           .AddMacro( "TypeQualifiedName", "Benchmark.Tests.TestType" )
           .AddMacro( "TypeKeyword", "string" )
           .AddMacro( "JsonTokenType", "String" )
           .AddMacro( "JsonReader", "reader.GetString()" )
           .AddMacro( "JsonWriter", "writer.WriteStringValue( value.Value )" )
           .Build();
  }

  #endregion
}
