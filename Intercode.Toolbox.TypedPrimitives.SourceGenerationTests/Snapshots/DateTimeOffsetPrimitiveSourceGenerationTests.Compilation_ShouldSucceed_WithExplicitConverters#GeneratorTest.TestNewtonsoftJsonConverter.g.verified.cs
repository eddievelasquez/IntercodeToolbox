//HintName: GeneratorTest.TestNewtonsoftJsonConverter.g.cs
// <auto-generated> This file has been auto generated by Intercode Toolbox Typed Primitives. </auto-generated>
#nullable enable

namespace GeneratorTest;

public partial class TestNewtonsoftJsonConverter: global::Newtonsoft.Json.JsonConverter
{
  public override bool CanConvert(
    global::System.Type objectType )
  {
    return objectType == typeof( GeneratorTest.Test );
  }

  public override object? ReadJson(
    global::Newtonsoft.Json.JsonReader reader,
    global::System.Type objectType,
    object? existingValue,
    global::Newtonsoft.Json.JsonSerializer serializer )
  {
    global::System.DateTimeOffset? value = null;
    if( reader.TokenType != global::Newtonsoft.Json.JsonToken.Null )
    {
      if( reader.TokenType == global::Newtonsoft.Json.JsonToken.String )
      {
        value = global::System.DateTimeOffset.Parse( ( string ) reader.Value! );
      }
      else if ( reader.TokenType == global::Newtonsoft.Json.JsonToken.Date )
      {
        if ( reader.Value is global::System.DateTimeOffset dateTimeOffset )
        {
          value = dateTimeOffset;
        }
        if ( reader.Value is global::System.DateTime dateTime )
        {
          value = dateTime;
        }
        else
        {
          throw new global::Newtonsoft.Json.JsonSerializationException( "Value must be a DateTimeOffset" );
        }
      }
      else
      {
        var converted = false;
        ConvertToPartial( ref reader, objectType, ref value, ref converted );

        if( !converted )
        {
          throw new global::Newtonsoft.Json.JsonSerializationException( "Value must be a String" );
        }
      }
    }

    var result = GeneratorTest.Test.Create( value );
    if( result.IsFailed )
    {
      throw new global::Newtonsoft.Json.JsonSerializationException( global::System.Linq.Enumerable.First( result.Errors ).Message );
    }

    return result.Value;
  }

  public override void WriteJson(
    global::Newtonsoft.Json.JsonWriter writer,
    object? value,
    global::Newtonsoft.Json.JsonSerializer serializer )
  {
    if( value is null )
    {
      writer.WriteNull();
      return;
    }

    if( value is not GeneratorTest.Test s )
    {
      throw new global::Newtonsoft.Json.JsonSerializationException( $"Unexpected object type: {value.GetType().Name}" );
    }

    if( s.IsDefault )
    {
      writer.WriteNull();
      return;
    }

    writer.WriteValue( s.Value.ToString( "O" ) );
  }

  partial void ConvertToPartial(
    ref global::Newtonsoft.Json.JsonReader reader,
    global::System.Type typeToConvert,
    ref global::System.DateTimeOffset? convertedValue,
    ref bool converted );
}
